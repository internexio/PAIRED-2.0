#!/bin/bash
# PAIRED (Platform for AI-Enabled Remote Development) - Unified Command Interface
# Professional CLI dispatcher for all PAIRED functionality

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
PURPLE='\033[0;35m'
NC='\033[0m'

# PAIRED directories
PAIRED_GLOBAL_DIR="$HOME/.paired"
PAIRED_SCRIPTS_DIR="$PAIRED_GLOBAL_DIR/scripts"

# Legacy WEE compatibility aliases (for backward compatibility)
WEE_GLOBAL_DIR="$PAIRED_GLOBAL_DIR"
WEE_SCRIPTS_DIR="$PAIRED_SCRIPTS_DIR"

# Detect current project's PAIRED directory
detect_project_root() {
    if [ -d "$(pwd)/.paired" ] || [ -f "$(pwd)/.pairedrules" ]; then
        echo "$(pwd)"
        return 0
    fi
    
    # Look for .paired directory in parent directories
    local current_dir="$(pwd)"
    while [ "$current_dir" != "/" ]; do
        if [ -d "$current_dir/.paired" ] || [ -f "$current_dir/.pairedrules" ]; then
            echo "$current_dir"
            return 0
        fi
        current_dir="$(dirname "$current_dir")"
    done
    
    return 1
}

# Show help for main command
show_help() {
    cat << 'EOF'
ü§ù PAIRED (Platform for AI-Enabled Remote Development) - Unified Command Interface

USAGE:
    paired <command> [options]

CORE OPERATIONS:
    init                Initialize PAIRED in current project
    status              Show system and project status
    doctor [--repair]   Run health checks and repairs

PROJECT OPERATIONS:
    handoff             Generate session handoff
    resume              Resume from last session
    docs                Discover project documentation
    cleanup             Clean up type annotations and formatting

ENVIRONMENT MANAGEMENT:
    env <environment>   Set environment (dev/test/prod)

KNOWLEDGE MANAGEMENT:
    sync                Sync with global knowledge base
    share               Share knowledge patterns
    backup              Backup PAIRED configuration
    knowledge <cmd>     Project knowledge management (init, learn, context, search, stats, export)

AGENT OPERATIONS:
    qa <command>        QA Agent operations (status, monitor, tests, etc.)
    dev <command>       Dev Agent operations (status, stories, debug, etc.)
    arch <command>      Architecture Agent operations (status, review, etc.)
    agent-cli <cmd>     Agent CLI integration (discover, execute, history, stats)

COLLABORATION WORKFLOWS:
    collaborate list    List available collaboration templates
    collaborate show    Show details of a specific template
    collaborate start   Start a multi-agent collaboration workflow

NAVIGATION:
    cd global           Navigate to global PAIRED directory
    cd project          Navigate to project root

SYSTEM:
    version             Show PAIRED version information
    help                Show this help message

EXAMPLES:
    paired init         # Initialize PAIRED in current directory
    paired status       # Check system status
    paired handoff      # Generate handoff for current session
    paired env dev      # Set development environment
    paired doctor --repair # Run health check with auto-repair
    paired qa status    # Check QA agent status
    paired dev stories  # View development stories
    paired arch review  # View architecture reviews

Use 'paired <command> --help' for detailed help on specific commands.

üöÄ For more information, visit: https://github.com/SEMalytics/workflow-evolution-engine
EOF
}

# Show version information
show_version() {
    echo -e "${BLUE}ü§ù PAIRED (Platform for AI-Enabled Remote Development)${NC}"
    echo -e "${CYAN}Version: 2.0.0-unified${NC}"
    echo -e "${CYAN}Global Directory: $PAIRED_GLOBAL_DIR${NC}"
    if PAIRED_PROJECT_ROOT=$(detect_project_root); then
        echo -e "${CYAN}Project Directory: $PAIRED_PROJECT_ROOT${NC}"
    else
        echo -e "${YELLOW}Not in a PAIRED project${NC}"
    fi
}

# Execute core operations
execute_core() {
    local command="$1"
    shift
    
    case "$command" in
        "init")
            echo -e "${BLUE}ü§ù Initializing PAIRED project...${NC}"
            exec "$PAIRED_SCRIPTS_DIR/init-project.sh" "$@"
            ;;
        "status")
            echo -e "${BLUE}üìä Checking PAIRED status...${NC}"
            exec "$PAIRED_SCRIPTS_DIR/global-status.sh" "$@"
            ;;
        "doctor")
            echo -e "${BLUE}ü©∫ Running PAIRED health check...${NC}"
            exec "$PAIRED_SCRIPTS_DIR/paired-doctor.sh" "$@"
            ;;
        *)
            echo -e "${RED}‚ùå Unknown core command: $command${NC}"
            echo -e "${YELLOW}üí° Use 'paired help' to see available commands${NC}"
            exit 1
            ;;
    esac
}

# Execute project operations
execute_project() {
    local command="$1"
    shift
    
    # Detect project root
    if ! PAIRED_PROJECT_ROOT=$(detect_project_root); then
        echo -e "${RED}‚ùå Not in a PAIRED project${NC}"
        echo -e "${YELLOW}üí° Use 'paired init' to initialize PAIRED in this directory${NC}"
        exit 1
    fi
    
    case "$command" in
        "handoff")
            echo -e "${BLUE}üìã Generating session handoff...${NC}"
            if [ -x "$PAIRED_PROJECT_ROOT/.paired/scripts/handoff.sh" ]; then
                exec "$PAIRED_PROJECT_ROOT/.paired/scripts/handoff.sh" "$@"
            else
                echo -e "${RED}‚ùå Handoff script not found${NC}"
                echo -e "${YELLOW}üí° Run 'paired doctor --repair' to fix missing scripts${NC}"
                exit 1
            fi
            ;;
        "resume")
            echo -e "${BLUE}üîÑ Resuming from last session...${NC}"
            if [ -x "$PAIRED_PROJECT_ROOT/.paired/scripts/resume.sh" ]; then
                exec "$PAIRED_PROJECT_ROOT/.paired/scripts/resume.sh" "$@"
            else
                echo -e "${RED}‚ùå Resume script not found${NC}"
                echo -e "${YELLOW}üí° Run 'paired doctor --repair' to fix missing scripts${NC}"
                exit 1
            fi
            ;;
        "docs")
            echo -e "${BLUE}üìö Discovering project documentation...${NC}"
            if [ -x "$PAIRED_PROJECT_ROOT/.paired/scripts/doc_discovery.sh" ]; then
                exec "$PAIRED_PROJECT_ROOT/.paired/scripts/doc_discovery.sh" "$@"
            else
                echo -e "${RED}‚ùå Documentation discovery script not found${NC}"
                echo -e "${YELLOW}üí° Run 'paired doctor --repair' to fix missing scripts${NC}"
                exit 1
            fi
            ;;
        "cleanup")
            echo -e "${BLUE}üßπ Cleaning up project...${NC}"
            if [ -x "$PAIRED_PROJECT_ROOT/.paired/scripts/type_cleanup.py" ]; then
                exec "$PAIRED_PROJECT_ROOT/.paired/scripts/type_cleanup.py" "$@"
            else
                echo -e "${RED}‚ùå Cleanup script not found${NC}"
                echo -e "${YELLOW}üí° Run 'paired doctor --repair' to fix missing scripts${NC}"
                exit 1
            fi
            ;;
        *)
            echo -e "${RED}‚ùå Unknown project command: $command${NC}"
            echo -e "${YELLOW}üí° Use 'paired help' to see available commands${NC}"
            exit 1
            ;;
    esac
}

# Execute environment management
execute_env() {
    local environment="$1"
    shift
    
    # Detect project root
    if ! PAIRED_PROJECT_ROOT=$(detect_project_root); then
        echo -e "${RED}‚ùå Not in a PAIRED project${NC}"
        echo -e "${YELLOW}üí° Use 'paired init' to initialize PAIRED in this directory${NC}"
        exit 1
    fi
    
    case "$environment" in
        "dev"|"test"|"prod")
            echo -e "${BLUE}üåê Setting $environment environment...${NC}"
            if [ -x "$PAIRED_PROJECT_ROOT/.paired/scripts/set-env.sh" ]; then
                exec "$PAIRED_PROJECT_ROOT/.paired/scripts/set-env.sh" "$environment" "$@"
            else
                echo -e "${RED}‚ùå Environment script not found${NC}"
                echo -e "${YELLOW}üí° Run 'paired doctor --repair' to fix missing scripts${NC}"
                exit 1
            fi
            ;;
        *)
            echo -e "${RED}‚ùå Unknown environment: $environment${NC}"
            echo -e "${YELLOW}üí° Available environments: dev, test, prod${NC}"
            exit 1
            ;;
    esac
}

# Execute knowledge management
execute_knowledge() {
    local command="$1"
    shift
    
    case "$command" in
        "sync")
            echo -e "${BLUE}üîÑ Syncing with global knowledge...${NC}"
            exec "$PAIRED_SCRIPTS_DIR/knowledge-sync.sh" "$@"
            ;;
        "share")
            echo -e "${BLUE}üì§ Sharing knowledge patterns...${NC}"
            exec "$PAIRED_SCRIPTS_DIR/share-knowledge.sh" "$@"
            ;;
        "backup")
            echo -e "${BLUE}üíæ Backing up PAIRED configuration...${NC}"
            if [ -f "$PAIRED_SCRIPTS_DIR/windsurf-backup.sh" ]; then
                exec "$PAIRED_SCRIPTS_DIR/windsurf-backup.sh" "$@"
            else
                echo -e "${YELLOW}‚ö†Ô∏è  Backup script not available${NC}"
                exit 1
            fi
            ;;
        *)
            echo -e "${RED}‚ùå Unknown knowledge command: $command${NC}"
            echo -e "${YELLOW}üí° Use 'paired help' to see available commands${NC}"
            exit 1
            ;;
    esac
}

# Execute navigation
execute_navigation() {
    local target="$1"
    shift
    
    case "$target" in
        "global")
            echo -e "${BLUE}üìÅ Navigating to global PAIRED directory...${NC}"
            cd "$PAIRED_GLOBAL_DIR"
            exec "$SHELL"
            ;;
        "project")
            if PAIRED_PROJECT_ROOT=$(detect_project_root); then
                echo -e "${BLUE}üìÅ Navigating to project root...${NC}"
                cd "$PAIRED_PROJECT_ROOT"
                exec "$SHELL"
            else
                echo -e "${RED}‚ùå Not in a PAIRED project${NC}"
                echo -e "${YELLOW}üí° Use 'paired init' to initialize PAIRED in this directory${NC}"
                exit 1
            fi
            ;;
        *)
            echo -e "${RED}‚ùå Unknown navigation target: $target${NC}"
            echo -e "${YELLOW}üí° Available targets: global, project${NC}"
            exit 1
            ;;
    esac
}

# Execute agent operations
execute_agent() {
    local agent="$1"
    shift
    
    if [ $# -eq 0 ]; then
        echo -e "${RED}‚ùå Agent command required${NC}"
        echo -e "${YELLOW}üí° Usage: paired $agent <command>${NC}"
        exit 1
    fi
    
    local command="$1"
    shift
    
    # Check if we're in a PAIRED project for agent operations
    local project_root
    if ! project_root=$(detect_project_root); then
        echo -e "${RED}‚ùå Not in a PAIRED project${NC}"
        echo -e "${YELLOW}üí° Use 'paired init' to initialize PAIRED in this directory${NC}"
        exit 1
    fi
    
    local agent_dir="$PAIRED_GLOBAL_DIR/src/agents/${agent}_agent"
    local agent_scripts="$agent_dir/scripts"
    
    case "$agent" in
        "qa")
            case "$command" in
                "status") exec "$agent_scripts/qa_notifications.sh" check ;;
                "monitor") exec "$agent_scripts/qa_notifications.sh" start ;;
                "test") exec "$agent_scripts/qa_notifications.sh" test ;;
                "tests") exec cat "$agent_dir/tracking/test_results.md" ;;
                "coverage") exec cat "$agent_dir/tracking/test_coverage.md" ;;
                "quality") exec cat "$agent_dir/tracking/quality_metrics.md" ;;
                "reviews") exec cat "$agent_dir/tracking/review_history.md" ;;
                "audit") exec cat "$agent_dir/tracking/audit_history.md" ;;
                "compliance") exec cat "$agent_dir/tracking/compliance_status.md" ;;
                *) 
                    echo -e "${RED}‚ùå Unknown QA command: $command${NC}"
                    echo -e "${YELLOW}üí° Available: status, monitor, test, tests, coverage, quality, reviews, audit, compliance${NC}"
                    exit 1
                    ;;
            esac
            ;;
        "dev")
            case "$command" in
                "status") exec "$agent_scripts/dev_notifications.sh" check ;;
                "monitor") exec "$agent_scripts/dev_notifications.sh" start ;;
                "test") exec "$agent_scripts/dev_notifications.sh" test ;;
                "stories") exec cat "$agent_dir/tracking/story_progress.md" ;;
                "quality") exec cat "$agent_dir/tracking/code_quality.md" ;;
                "debug") exec cat "$agent_dir/tracking/debug_sessions.md" ;;
                "implementation") exec cat "$agent_dir/tracking/implementation_status.md" ;;
                "story")
                    if [ $# -eq 0 ]; then
                        echo -e "${YELLOW}üí° Usage: paired dev story <new|list|status|start|complete> [args]${NC}"
                        exit 1
                    fi
                    local story_cmd="$1"
                    shift
                    case "$story_cmd" in
                        "new") exec node "$agent_dir/cli/story.js" create "$@" ;;
                        "list") exec node "$agent_dir/cli/story.js" list ;;
                        "status") exec node "$agent_dir/cli/story.js" status ;;
                        "start") exec node "$agent_dir/cli/story.js" start "$@" ;;
                        "complete") exec node "$agent_dir/cli/story.js" complete "$@" ;;
                        *) 
                            echo -e "${RED}‚ùå Unknown story command: $story_cmd${NC}"
                            echo -e "${YELLOW}üí° Available: new, list, status, start, complete${NC}"
                            exit 1
                            ;;
                    esac
                    ;;
                *) 
                    echo -e "${RED}‚ùå Unknown Dev command: $command${NC}"
                    echo -e "${YELLOW}üí° Available: status, monitor, test, stories, quality, debug, implementation, story${NC}"
                    exit 1
                    ;;
            esac
            ;;
        "arch")
            case "$command" in
                "status") exec "$agent_scripts/arch_notifications.sh" check ;;
                "monitor") exec "$agent_scripts/arch_notifications.sh" start ;;
                "test") exec "$agent_scripts/arch_notifications.sh" test ;;
                "review") exec cat "$agent_dir/tracking/architecture_reviews.md" 2>/dev/null || echo "No architecture reviews found" ;;
                *) 
                    echo -e "${RED}‚ùå Unknown Architecture command: $command${NC}"
                    echo -e "${YELLOW}üí° Available: status, monitor, test, review${NC}"
                    exit 1
                    ;;
            esac
            ;;
        *)
            echo -e "${RED}‚ùå Unknown agent: $agent${NC}"
            echo -e "${YELLOW}üí° Available agents: qa, dev, arch${NC}"
            exit 1
            ;;
    esac
}

# Execute collaboration workflows
execute_collaboration() {
    local subcommand="$1"
    shift
    
    case "$subcommand" in
        "list")
            echo -e "${BLUE}ü§ù Available Agent Collaboration Templates${NC}"
            echo "=============================================="
            node "$PAIRED_GLOBAL_DIR/src/cli/collaboration-templates-cli.js" list
            ;;
        "show")
            if [ $# -eq 0 ]; then
                echo -e "${RED}‚ùå Template name required${NC}"
                echo -e "${YELLOW}üí° Usage: paired collaborate show <template_name>${NC}"
                exit 1
            fi
            local template_name="$1"
            echo -e "${BLUE}ü§ù Agent Collaboration Template: $template_name${NC}"
            echo "=================================================="
            node "$PAIRED_GLOBAL_DIR/src/cli/collaboration-templates-cli.js" show "$template_name"
            ;;
        "start")
            if [ $# -eq 0 ]; then
                echo -e "${RED}‚ùå Template name required${NC}"
                echo -e "${YELLOW}üí° Usage: paired collaborate start <template_name>${NC}"
                exit 1
            fi
            local template_name="$1"
            echo -e "${BLUE}ü§ù Starting Agent Collaboration: $template_name${NC}"
            echo "=================================================="
            node "$PAIRED_GLOBAL_DIR/src/cli/collaboration-templates-cli.js" start "$template_name" "${@:2}"
            ;;
        *)
            echo -e "${RED}‚ùå Unknown collaboration command: $subcommand${NC}"
            echo -e "${YELLOW}üí° Available commands: list, show, start${NC}"
            exit 1
            ;;
    esac
}

# Execute project knowledge commands
execute_project_knowledge() {
    local subcommand="${1:-}"
    if [ $# -gt 0 ]; then
        shift
    fi
    
    case "$subcommand" in
        "init")
            echo -e "${BLUE}üß† Initializing Project Knowledge${NC}"
            echo "=================================="
            node "$PAIRED_GLOBAL_DIR/src/cli/project-knowledge-cli.js" init "$@"
            ;;
        "learn")
            echo -e "${BLUE}üìö Learning from Session${NC}"
            echo "========================"
            node "$PAIRED_GLOBAL_DIR/src/cli/project-knowledge-cli.js" learn "$@"
            ;;
        "context")
            echo -e "${BLUE}üîç Project Knowledge Context${NC}"
            echo "============================"
            node "$PAIRED_GLOBAL_DIR/src/cli/project-knowledge-cli.js" context "$@"
            ;;
        "search")
            if [ $# -eq 0 ]; then
                echo -e "${RED}‚ùå Search query required${NC}"
                echo -e "${YELLOW}üí° Usage: paired knowledge search <query>${NC}"
                exit 1
            fi
            echo -e "${BLUE}üîç Searching Project Knowledge${NC}"
            echo "=============================="
            node "$PAIRED_GLOBAL_DIR/src/cli/project-knowledge-cli.js" search "$@"
            ;;
        "stats")
            echo -e "${BLUE}üìä Project Knowledge Statistics${NC}"
            echo "==============================="
            node "$PAIRED_GLOBAL_DIR/src/cli/project-knowledge-cli.js" stats "$@"
            ;;
        "export")
            echo -e "${BLUE}üì§ Exporting Project Knowledge${NC}"
            echo "==============================="
            node "$PAIRED_GLOBAL_DIR/src/cli/project-knowledge-cli.js" export "$@"
            ;;
        "help"|"--help"|"-h"|"")
            echo -e "${BLUE}üß† PAIRED Project Knowledge Commands${NC}"
            echo "===================================="
            echo ""
            echo "COMMANDS:"
            echo "  init                Initialize project knowledge system"
            echo "  learn               Learn from development session"
            echo "  context             Get project knowledge context"
            echo "  search <query>      Search project knowledge"
            echo "  stats               Show knowledge statistics"
            echo "  export              Export project knowledge"
            echo ""
            echo "EXAMPLES:"
            echo "  paired knowledge init"
            echo "  paired knowledge learn --interactive"
            echo "  paired knowledge context --patterns"
            echo "  paired knowledge search 'authentication'"
            echo "  paired knowledge stats"
            echo "  paired knowledge export --format markdown"
            ;;
        *)
            echo -e "${RED}‚ùå Unknown knowledge command: $subcommand${NC}"
            echo -e "${YELLOW}üí° Available commands: init, learn, context, search, stats, export${NC}"
            exit 1
            ;;
    esac
}

# Main command dispatcher
main() {
    # Handle no arguments
    if [ $# -eq 0 ]; then
        show_help
        exit 0
    fi
    
    local command="$1"
    shift
    
    case "$command" in
        # Help and version
        "help"|"--help"|"-h")
            show_help
            ;;
        "version"|"--version"|"-v")
            show_version
            ;;
            
        # Core operations
        "init"|"status"|"doctor")
            execute_core "$command" "$@"
            ;;
            
        # Project operations
        "handoff"|"resume"|"docs"|"cleanup")
            execute_project "$command" "$@"
            ;;
            
        # Environment management
        "env")
            if [ $# -eq 0 ]; then
                echo -e "${RED}‚ùå Environment required${NC}"
                echo -e "${YELLOW}üí° Usage: paired env <dev|test|prod>${NC}"
                exit 1
            fi
            execute_env "$@"
            ;;
            
        # Knowledge management
        "sync"|"share"|"backup")
            execute_knowledge "$command" "$@"
            ;;
        "knowledge")
            execute_project_knowledge "$@"
            ;;
            
        # Agent operations
        "qa"|"dev"|"arch")
            execute_agent "$command" "$@"
            ;;
            
        # Agent CLI integration (for agent automation and mass refactoring)
        "agent-cli")
            if [ $# -eq 0 ]; then
                echo -e "${RED}‚ùå Agent CLI command required${NC}"
                echo -e "${YELLOW}üí° Usage: paired agent-cli <discover|execute|history|stats>${NC}"
                exit 1
            fi
            echo -e "${BLUE}ü§ñ Agent CLI Integration${NC}"
            echo "======================="
            node "$PAIRED_GLOBAL_DIR/src/cli/agent-cli.js" "$@"
            ;;
            
        # Collaboration workflows
        "collaborate")
            execute_collaboration "$@"
            ;;
            
        # Navigation
        "cd")
            if [ $# -eq 0 ]; then
                echo -e "${RED}‚ùå Navigation target required${NC}"
                echo -e "${YELLOW}üí° Usage: paired cd <global|project>${NC}"
                exit 1
            fi
            execute_navigation "$@"
            ;;
            
        # Unknown command
        *)
            echo -e "${RED}‚ùå Unknown command: $command${NC}"
            echo -e "${YELLOW}üí° Use 'paired help' to see available commands${NC}"
            exit 1
            ;;
    esac
}

# Execute main function with all arguments
main "$@"
